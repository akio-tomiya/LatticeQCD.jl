module RationalApprox
    import ..CGmethods:shiftedcg
    import ..Fermionfields:add!,clear!
    using LinearAlgebra

    struct AlgRemez_coeffs
        α0::Float64
        α::Array{Float64,1}
        β::Array{Float64,1}
        n::Int64
    end

    #=
    const coeffs_14 = AlgRemez_coeffs(5.7165557622098175, [-1.1472527436322903e-5, -8.22437195900441e-5, -0.0004911917249478209, -0.0028595740550169564, -0.01657546771377983, -0.09632764566721617, -0.5684080282956644, -3.574637513226843, -29.402805614736042, -910.454747964212], [0.00017585352463504747, 0.0012116676043259563, 0.005511731061457466, 0.023034355065820862, 0.09439559579370578, 0.38561054626048247, 1.5842943313284588, 6.695935386170518, 32.015219356384215, 297.1675517580863], 10)
    const coeffs_m14 = AlgRemez_coeffs(0.17493050738884694, [0.000659835331355923, 0.0018359285824308825, 0.0051025759090143645, 0.014493338675151415, 0.04146036428067062, 0.1190535368426458, 0.3449286017982327, 1.0347965655277906, 3.585219290905995, 23.743072811520367], [8.614668677164346e-5, 0.0007996196969643771, 0.0038232149092825908, 0.01615861364506301, 0.06638822575850153, 0.2711990933978193, 1.1113834065181245, 4.644638810303384, 21.127906621091135, 145.57570030585526], 10)
    =#
    #const coeffs_14 =AlgRemez_coeffs(6.237555807236711, [-6.852310536673701e-6, -3.962896201039508e-5, -0.00018217497211488656, -0.0008060150679555132, -0.0035346642476614698, -0.015474454598361569, -0.06788407396000712, -0.3004576368633714, -1.3699834587430375, -6.89240954866002, -48.61774875043485, -1416.8500700331845], [0.00011953611435854209, 0.0007311401642740109, 0.002793178964974201, 0.009522583642676089, 0.03142084377797016, 0.10269563835387005, 0.3350538138424886, 1.0965762161383954, 3.636004038255529, 12.603404160465065, 51.17176858380619, 429.54139934542627], 12)
    #const coeffs_m14 =AlgRemez_coeffs(0.160319206898288, [0.0004914663805889223, 0.0011882668037123535, 0.002776996439455729, 0.00663203155176037, 0.015991366500275026, 0.03870069286934811, 0.09390556444588163, 0.22913553931210132, 0.5688706697667613, 1.4944148006819375, 4.744510227390929, 30.691544295011603], [5.9598446247583076e-5, 0.000500275849525775, 0.002031197260205561, 0.007040696250789176, 0.023345390519366425, 0.07640563677342518, 0.2492803045031686, 0.8147457840692595, 2.6883460372321557, 9.165184301119945, 35.01380617684934, 214.1612192882077], 12)
    const coeffs_12 = AlgRemez_coeffs(35.76877880344718, [-2.611603580931762e-6, -2.8381078304162547e-5, -0.00024575851782184877, -0.0020470080999742007, -0.016923799105426088, -0.14034361960343106, -1.1877898203825932, -10.955212949978659, -146.07789284928893, -14714.341373866839], [0.00023220051347978252, 0.0014679843480651033, 0.006577084315568452, 0.027426964178005095, 0.11250019513122003, 0.46049080638938455, 1.8988299965694169, 8.104664281763002, 40.29762890763353, 497.70654517555414], 10)
    const coeffs_m12 = AlgRemez_coeffs(0.027957342505180133, [0.009504168034266293, 0.014392806670277538, 0.02668521749757119, 0.05270932006455869, 0.10589384745339038, 0.2139495082299973, 0.4353956294494188, 0.9089955204708765, 2.107201294600078, 7.749985438494519], [5.143593197266517e-5, 0.0006352731089632578, 0.003158674944452018, 0.013481986300116959, 0.055592857978478315, 0.22755516086118974, 0.9333880277034011, 3.892302237847687, 17.438878032822647, 110.24954086601954], 10)
    const coeffs_14 = AlgRemez_coeffs(6.9461071718499525, [-3.7385105377001425e-6, -1.7764883979837546e-5, -6.334438533952787e-5, -0.00021317868898123004, -0.0007061292823812292, -0.0023271447494456277, -0.007658442853216887, -0.025215367727471134, -0.08325492911813415, -0.27706279011926743, -0.9413396741768589, -3.376769295570277, -14.000699219260555, -87.48968373506541, -2438.159453743938], [7.533204879983615e-5, 0.0004155648337491737, 0.001355472748322587, 0.0038120901090773723, 0.010182414902576235, 0.02668386113490887, 0.06943317053167551, 0.18025949646037842, 0.46811809693900475, 1.219485561990294, 3.205950452609407, 8.636487104246942, 24.866247747939997, 87.21468047228943, 671.5034010759199], 15)
    const coeffs_m14 = AlgRemez_coeffs(0.14396552993778106, [0.00034605541183977854, 0.0007361352806089118, 0.0014491361385218552, 0.002897390997668544, 0.005861553385743302, 0.011923530079141716, 0.0243152683972108, 0.04966483224890658, 0.10166850937810712, 0.20917319384688998, 0.4358756590644266, 0.9388526693245018, 2.2065131459490663, 6.583620229613641, 42.16178846519866], [3.8123410780916776e-5, 0.0002935285649316097, 0.0010295079603283045, 0.002964168149734324, 0.007985151479544388, 0.020992458457826137, 0.054687054756901776, 0.14201748314340246, 0.3686998563362629, 0.959381398013239, 2.5141383694277666, 6.715476095132465, 18.886399620855748, 61.602902654298305, 339.8288033824946], 15)
    const coeffs_18 =AlgRemez_coeffs(2.6226563721874356, [-5.960771208125207e-6, -2.365926748832181e-5, -7.312974957271435e-5, -0.00021647258378734637, -0.0006342614065525487, -0.0018530026882076763, -0.005410134459579222, -0.01580639454625644, -0.04630025630383474, -0.13658135694721724, -0.4103890831099445, -1.2939417075231405, -4.636609634886856, -23.781760392176484, -426.7735702750801], [6.511406585080085e-5, 0.0003827736362029256, 0.001267715019499123, 0.003583090268588116, 0.009587354346137916, 0.02513865988838697, 0.06541997845298224, 0.169826364132841, 0.4409229237078518, 1.1481048390885387, 3.015181840776192, 8.102022022873221, 23.168853584928378, 79.54719981908272, 550.2916347706022], 15)
    const coeffs_m18 = AlgRemez_coeffs(0.3812928032069815, [5.704553583093206e-5, 0.00015212625565764492, 0.000349624141431336, 0.0007978804843345692, 0.0018271691389798897, 0.004194095333537474, 0.009639799649923194, 0.022183627514153276, 0.05116785778935707, 0.11868662341141359, 0.2793062781945737, 0.6824916959670321, 1.8418776768771283, 6.536228531781246, 56.90662030012766], [4.652078712894077e-5, 0.0003218215104770888, 0.0011049316663925537, 0.003159705062233523, 0.00849036686736275, 0.02229761527729769, 0.05806003413186596, 0.15074220148748674, 0.39131776875161906, 1.018351818022971, 2.6701839814977193, 7.144670683970085, 20.193812967613667, 66.8802591890845, 393.15622001947446], 15)

#A^{1/n} ϕ = (PDP^+)^{1/n} = P D^{1/n} P^+
    function calc_exactvalue(n,A,ϕ) #A^1/n
        An = A^(1/n)
        return An*ϕ
    end

    function inverse!(vec_x,vec_β,A,ϕ)
        ϕout = zero(ϕ)
        L = length(ϕ)
        for i=1:length(vec_β)
            Aout = A + vec_β[i]*Diagonal(ones(L))
            vec_x[i] = Aout \ ϕ
        end
    end

    function calc_det(n,A,ϕ;itemax = 1000)
        println("exact detA = $(det(A))")
        detex = det(A)
        detAprrox = 0
        L = length(ϕ)

        for ite=1:itemax
            rexp = 1.0
            for i=1:n
                ϕin = rand(L)
                ϕout  =calc_exactvalue(-n,A,ϕin)
                #ϕout = calc_Anϕ(-n,A,ϕin)
                rexp *= exp(-ϕin'*ϕout)
                println(-ϕin'*ϕout)
            end
            detAprrox += rexp
            println("$ite ",detAprrox,"\t",detAprrox/ite,"\t",detex)
        end
    end

    function calc_Anϕ(n,A,ϕ)
        if n==4
            coeff = coeffs_14
        elseif n == -4
            coeff = coeffs_m14
        elseif n == 2
            coeff = coeffs_12
        elseif n== -2
            coeff = coeffs_m12
        elseif n == 8
            coeff = coeffs_18
        elseif n== -8
            coeff = coeffs_m18
        else
            error("not supprted yet")
        end

        vec_β = coeff.β
        vec_x = Array{typeof(ϕ),1}(undef,coeff.n)
        for i=1:coeff.n
            vec_x[i] = deepcopy(ϕ)
            clear!(vec_x[i])
        end
        #=
        vec_xref = copy(vec_x)
        inverse!(vec_xref,vec_β,A,ϕ)
        =#
        

        x = deepcopy(ϕ)
        clear!(x)
        shiftedcg(vec_x,vec_β,x,A,ϕ)
        #for i=1:coeff.n
        #    println(sum(abs.(vec_x[i] - vec_xref[i])))
        #end
        ϕout = deepcopy(ϕ)
        mul!(ϕout,coeff.α0,ϕ)
        #ϕout = coeff.α0*ϕ
        for i=1:coeff.n
            add!(ϕout,coeff.α[i],vec_x[i])
            #ϕout[:] += coeff.α[i]*vec_x[i]
        end
        return ϕout

    end
end