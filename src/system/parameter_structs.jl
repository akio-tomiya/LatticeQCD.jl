module Parameter_structs
    using REPL.TerminalMenus
#=
        actions["use_autogeneratedstaples"] = false
        actions["couplinglist"] = []
        actions["couplingcoeff"] = []
        system["BoundaryCondition"] = [1,1,1,-1]
        system["Nwing"] = 1
=#
Base.@kwdef mutable struct Action
    use_autogeneratedstaples::Bool = false
    couplinglist::Vector{String} = []
    couplingcoeff::Vector{ComplexF64} = []
end

Base.@kwdef mutable struct System
    BoundaryCondition::Vector{Int64} = [1, 1, 1, -1]
    Nwing::Int8 = 1
    verboselevel::Int8 = 1
    randomseed::Int64 = 111
    L::NTuple{4,Int64} = (4, 4, 4, 4)
    NC::Int8 = 3
    β::Float64 = 5.7
    initialtrj::Int64 = 1
    loadU_format::Union{Nothing,String} = nothing
    update_method::String = "HMC"
    loadU_dir::Union{Nothing,String} = nothing
    loadU_fromfile::Bool = false
    loadU_filename::Union{Nothing,String} = nothing
    initial::String = "cold"
    Dirac_operator::Union{Nothing,String} = nothing
    quench::Bool = true
    smearing_for_fermion::String = "nothing"
    update_method::String = "HMC"
end

abstract type Smearing_parameters end

Base.@kwdef mutable struct NoSmearing_parameters <: Smearing_parameters end

const kindsof_loops = [
    "plaquette",
    "rectangular",
    "chair",
    "polyakov_x",
    "polyakov_y",
    "polyakov_z",
    "polyakov_t",
]

Base.@kwdef mutable struct Stout_parameters <: Smearing_parameters
    numlayers::Int64 = 1
    ρ::Vector{Float64} = []
    stout_loops::Vector{String} = []


end

function Stout_parameters_interactive()
    stout = Stout_parameters()

    stout_menu = MultiSelectMenu(kindsof_loops)
    choices =
        request("Select the kinds of loops you want to add in stout smearing:", stout_menu)
    count = 0
    ρs = Float64[]
    loops = String[]
    for i in choices
        count += 1
        ρ = parse(
            Float64,
            Base.prompt("coefficient ρ for $(kindsof_loops[i]) loop?", default = "0.1"),
        )
        push!(ρs, ρ)
        push!(loops, kindsof_loops[i])
    end
    stout.ρ = ρs
    stout.stout_loops = loops


end



abstract type Fermion_parameters end

Base.@kwdef mutable struct Quench_parameters <: Fermion_parameters end

Base.@kwdef mutable struct Wilson_parameters <: Fermion_parameters
    hop::Float64 = 0.141139
    r::Float64 = 1
    Clover_coefficient::Float64 = 1.5612
end

Base.@kwdef mutable struct Staggered_parameters <: Fermion_parameters
    mass::Float64 = 0.5 #mass
    Nf::Int64 = 2 #flavor 
end

Base.@kwdef mutable struct Domainwall_parameters <: Fermion_parameters
    N5::Int64 = 4
    M::Float64 = -1 #mass for Wilson operator which should be negative
    m::Float64 = 0.1 #physical mass
end

Base.@kwdef mutable struct ConjugateGradient
    eps::Float64 = 1e-19
    MaxCGstep::Int64 = 3000
end

function CG_params_interactive()
    cg = ConjugateGradient()
    eps = parse(Float64, Base.prompt("relative error in CG loops", default = "1e-19"))
    MaxCGstep =
        parse(Int64, Base.prompt("Maximum iteration steps in CG loops", default = "3000"))
    if eps <= 0
        error("Invalid value for eps=$eps. This has to be strictly positive.")
    end
    if MaxCGstep <= 0
        error("Invalid value for MaxCGstep=$MaxCGstep. This has to be strictly positive.")
    end
    cg.eps = eps
    cg.MaxCGstep = MaxCGstep
    return cg
end



end
